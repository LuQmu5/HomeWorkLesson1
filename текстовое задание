Шаблонный метод:
используем, когда нужно заложить основное действие в алгоритм и как-либо его дополнять или переопределять (частично) в наследниках,
например, можно сделать базовый абстрактный класс зелья, который определяет метод "Drink", а в различных наследниках добавлять различные эффекты при использовании этого метода
либо делаем врага с обычной атакой, а от него наследуем врага, который при той же самой обычной атаке будет наносить доп. урон магией и создавать соответствующую VFX-шку

Стратегия:
позволяет сделать сущность более гибкой за счет подмены поведения за счет указания разных реалиюзущих интерфейсов
при этом использующий такие сущности класс не будет знать о реализации этого поведения.
К примеру, у меня есть в игре босс, у которого есть 3 фазы, есть класс BossBehavior, который работает с различными паттернами поведения, например AttackPattern, который
я в зависимости от фазы могу подменить на паттерн с соответствующей фазы, который будет наследован от базового AttackPattern
Или, например, у меня есть контроллер игрока, который работает с классом отвечающим за бег, который я, если у персонажа будет лоу хп, буду подменять на тот же класс бега, 
но реализованный иначе другим классом
